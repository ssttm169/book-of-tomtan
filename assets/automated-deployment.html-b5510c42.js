import{_ as o,r as c,o as p,c as i,b as s,d as e,a,e as t}from"./app-b28ea471.js";const r="/project/vuepress/deploy-workflow.png.webp",l="/project/vuepress/create-access-token/create-access-token-1.png.webp",u="/project/vuepress/create-access-token/create-access-token-2.png.webp",d="/project/vuepress/create-access-token/create-access-token-3.png.webp",k="/project/vuepress/create-access-token/create-access-token-4.png.webp",m="/project/vuepress/create-access-token/create-access-token-5.png.webp",b="/project/vuepress/create-access-token/create-access-token-6.png.webp",v="/project/vuepress/secrets-token/secrets-token-1.png.webp",h="/project/vuepress/secrets-token/secrets-token-2.png.webp",g="/project/vuepress/secrets-token/secrets-token-3.png.webp",y="/project/vuepress/secrets-token/secrets-token-4.png.webp",_="/project/vuepress/delopy-log/deploy-log-1.png.webp",w="/project/vuepress/delopy-log/deploy-log-2.png.webp",x="/project/vuepress/github-cname.png.webp",f={},G=t('<h1 id="vuepress自动化部署" tabindex="-1"><a class="header-anchor" href="#vuepress自动化部署" aria-hidden="true">#</a> Vuepress自动化部署</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>现状是每次撰写完文章之后, 本地构建, 然后把 docs/.vuepress/dist所有文件 复制到另外一个仓库里, 再push到github page上面, 一天一两次倒没有什么问题, 但每天都重复这样的操作就比较繁琐, 所以开始捣腾自动化部署.</p><p>项目的情况是这样的。</p><ul><li><code>Github源码仓库</code> 主要存放vuepress博客的源码。</li><li><code>Github Page仓库</code> 主要存放vuepress构建出来的静态文件（html/js/css/img之类的）, 这个仓库与域名绑定在一起的。<br><br></li></ul><p>每次git push 代码 <code>Github源码仓库</code> 自动 触发 <code>Github Action</code> 构建完成之后 推送到 <code>Github Page仓库</code>.</p><p>大概流程如下:<br><img src="'+r+`" alt="自动化部署" loading="lazy">;</p><h2 id="创建yml文件" tabindex="-1"><a class="header-anchor" href="#创建yml文件" aria-hidden="true">#</a> 创建yml文件</h2><p>在项目的 .github/workflows/ 路径下新建一个 vuepress-deploy.yml, 如果已存在其他名称的yml，就不需要新建了.</p><p>具体的代码如下:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Build and Deploy

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> main <span class="token comment"># 确保这是你正在使用的分支名称</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">permissions</span><span class="token punctuation">:</span>
      <span class="token key atrule">contents</span><span class="token punctuation">:</span> write  <span class="token comment"># 写的权限</span>
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@main

    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 设置 Node.js
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3
      <span class="token key atrule">with</span><span class="token punctuation">:</span>
        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token comment"># node.js的版本号</span>

    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> vuepress<span class="token punctuation">-</span>deploy
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> jenkey2011/vuepress<span class="token punctuation">-</span>deploy@master
      <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># Github Page仓库的访问token</span>
        <span class="token key atrule">TARGET_REPO</span><span class="token punctuation">:</span> 用户/仓库名
        <span class="token key atrule">TARGET_BRANCH</span><span class="token punctuation">:</span> 分支名
        <span class="token key atrule">BUILD_SCRIPT</span><span class="token punctuation">:</span> npm install <span class="token important">&amp;&amp;</span> npm run docs<span class="token punctuation">:</span>build <span class="token comment"># 这里安装依赖和构建</span>
        <span class="token key atrule">BUILD_DIR</span><span class="token punctuation">:</span> docs/.vuepress/dist   <span class="token comment"># 这个是构建的出来的具体路径</span>
        <span class="token key atrule">COMMIT_MESSAGE</span><span class="token punctuation">:</span>  Auto deploy by the Vuepress<span class="token punctuation">-</span>deploy <span class="token comment"># 这个commit的说明, 这个看自己个人的喜好。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建access-token" tabindex="-1"><a class="header-anchor" href="#创建access-token" aria-hidden="true">#</a> 创建ACCESS_TOKEN</h2><p>上面的内容所提到的ACCESS_TOKEN，因为要通过github action的命令去更改 Github Page仓库的内容, 需要用到token。</p><h3 id="创建token" tabindex="-1"><a class="header-anchor" href="#创建token" aria-hidden="true">#</a> 创建token</h3><p>这个是你的帐号所有仓库的访问token, 具体操作步频是 点击 <code>你的头像</code> -&gt; <code>Settings</code> -&gt; <code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; <code>Generate new token (Classic)</code>, 具体看下面步骤.</p><p>步骤1 点击头像<br><img src="`+l+'" alt="步骤1" loading="lazy">;<br><br></p><p>步骤2 点击人个信息的Settings<br><img src="'+u+'" alt="步骤2" loading="lazy"><br><br></p><p>步骤3 点左边最下面的 Developer settings<br><img src="'+d+'" alt="步骤3" loading="lazy"><br><br></p><p>步骤4 点击 token(classic)<br><img src="'+k+'" alt="步骤4" loading="lazy"><br><br></p><p>步骤5 点击 Generate new token, 然后点击Generate new token(classic)<br><img src="'+m+'" alt="步骤5" loading="lazy"><br><br></p><p>步骤6 钩选 workflow 和 write:packages, 最后点击 Generate token<br><img src="'+b+'" alt="步骤6" loading="lazy"></p><p>生成token后, 复制保存好, 一会用到。<br><br></p><h3 id="创建仓库secrets" tabindex="-1"><a class="header-anchor" href="#创建仓库secrets" aria-hidden="true">#</a> 创建仓库secrets</h3><p>在需要设置的仓库下，点击 <code>Settings</code> -&gt; <code>Secrets and variables</code> -&gt; <code>Actions</code> -&gt; <code>New repository secret</code>, 具体看下面步骤</p><p>步骤1 点击仓库的Settings<br><img src="'+v+'" alt="步骤1" loading="lazy"><br><br></p><p>步骤2 点击Secrets and variables的Actions<br><img src="'+h+'" alt="步骤2" loading="lazy"><br><br></p><p>步骤3 点击New repository secret<br><img src="'+g+'" alt="步骤3" loading="lazy"><br><br></p><p>步骤4 name输入框填写与vuepress-deploy.yml的变量名保持一致,也就是ACCESS_TOKEN。 Secret入输框填写刚才生成的token， 最后点击Add secret。<br><img src="'+y+'" alt="步骤4" loading="lazy"></p><h2 id="最终效果" tabindex="-1"><a class="header-anchor" href="#最终效果" aria-hidden="true">#</a> 最终效果</h2><p>Github action 列表<br><img src="'+_+'" alt="GithubAction" loading="lazy"><br><br></p><p>下面这个是失败的例子, 具体是什么异常的信息, 需要点进去查看.<br><img src="'+w+`" alt="GithubAction" loading="lazy"></p><h2 id="部署异常" tabindex="-1"><a class="header-anchor" href="#部署异常" aria-hidden="true">#</a> 部署异常</h2><p>收集一些Github actions部署出现的异常信息和解决方案, 持续更新...</p><h3 id="token没填写或者没传递" tabindex="-1"><a class="header-anchor" href="#token没填写或者没传递" aria-hidden="true">#</a> Token没填写或者没传递</h3><p>Github action出现以下这种异常, 有两种可能性 1.是token字段没填对. 2.token为空.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>remote: Permission to username/xxx.git denied to username.
fatal: unable to access <span class="token string">&#39;***github.com/username/xxx.git/&#39;</span><span class="token builtin class-name">:</span> The requested URL returned error: <span class="token number">403</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="token错误" tabindex="-1"><a class="header-anchor" href="#token错误" aria-hidden="true">#</a> Token错误</h3><p>Github action出现以下这种异常, 可能是token填错了, 一般是ghp_开头的.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>remote: Invalid username or password.
fatal: Authentication failed <span class="token keyword">for</span> <span class="token string">&#39;***github.com/username/xxx.git/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发布成功后网站404" tabindex="-1"><a class="header-anchor" href="#发布成功后网站404" aria-hidden="true">#</a> 发布成功后网站404</h3>`,41),A={href:"http://book.itomtan.com",target:"_blank",rel:"noopener noreferrer"},E=t('<p><img src="'+x+`" alt="GithubAction" loading="lazy"><br><br></p><p>解决方案一<br> 就是在vuepress-deploy.yml最后一行加上 <code>CNAME: 你的域名</code>, 重新提交即可。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> vuepress<span class="token punctuation">-</span>deploy
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> jenkey2011/vuepress<span class="token punctuation">-</span>deploy@master
      <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token punctuation">...</span>..
        <span class="token punctuation">...</span>..
        <span class="token key atrule">CNAME</span><span class="token punctuation">:</span> 你的域名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,4),S=s("br",null,null,-1),j={href:"http://book.itomtan.com",target:"_blank",rel:"noopener noreferrer"};function C(N,T){const n=c("ExternalLinkIcon");return p(),i("div",null,[G,s("p",null,[e("好不容易把Github action调成功之后, 发现网站变成404了, 找不到网址, 什么情况? 查看Github Page仓库是有文件的, 也是最新的。但细心一看少了一个CNAME文件, 这个文件里边内容是网站的网址, 比如: "),s("a",A,[e("book.itomtan.com"),a(n)]),e("。")]),E,s("p",null,[e("解决方案二"),S,e(" 在这个 docs/.vuepress/public 路径下, 新建一个 CNAME 文件, 内容是你的网站域名，我的是 "),s("a",j,[e("book.itomtan.com"),a(n)]),e(", 建完之后, 重新提交即可。")])])}const P=o(f,[["render",C],["__file","automated-deployment.html.vue"]]);export{P as default};
